<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3279 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3279.xml">
<!-- <!ENTITY RFC3280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3280.xml"> -->
<!ENTITY RFC4055 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4055.xml">
<!ENTITY RFC4086 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4086.xml">
<!ENTITY RFC5280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5480 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5480.xml">
<!ENTITY RFC6979 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6979.xml">
<!ENTITY RFC8017 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8017.xml">
<!ENTITY I-D.draft-josefsson-pkix-eddsa SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.draft-josefsson-pkix-eddsa-04.xml">
]> 
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-ietf-lamps-pkix-shake-03" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr="full3978" (probably old)
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="SHAKE identifiers in X.509">Internet X.509 Public Key Infrastructure: Additional Algorithm Identifiers for RSASSA-PSS and ECDSA using SHAKEs as Hash Functions</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->
    <author fullname="Panos Kampanakis" initials="P.K."
            surname="Kampanakis">
      <organization>Cisco Systems</organization>
      <address>
        <email>pkampana@cisco.com</email>
      </address>
    </author>
    <author fullname="Quynh Dang" initials="Q.D."
            surname="Dang">
      <organization>NIST</organization>
      <address>
         <postal>
          <street>100 Bureau Drive, Stop 8930</street>
          <city>Gaithersburg</city>
          <region>MD</region>
          <code>20899-8930</code>
          <country>USA</country>
        </postal>
        <!-- <phone>+44 7889 488 335</phone> -->
        <email>quynh.dang@nist.gov</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <!-- <author fullname="Sean Turner" initials="S.T."
            surname="Turner">
      <organization>sn3rd</organization>
      <address>
        <postal>
          <street></street>
          <city>Soham</city>
          <region></region>
          <code></code>
          <country>UK</country>
        </postal>
        <phone>+44 7889 488 335</phone>
        <email>sean@sn3rd.com</email> 
      </address>
    </author> -->

    <date year="2018" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>
    <workgroup>LAMPS WG</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <!-- <keyword>template</keyword> -->

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the searPKIch engine. -->

    <abstract>
      <t>Digital signatures are used to sign messages, X.509 
	  certificates and CRLs (Certificate Revocation Lists). This 
	  document describes the conventions for using the SHAKE family of 
	  hash functions in the Internet X.509 as one-way hash functions 
	  with the RSA Probabilistic Signature Scheme and ECDSA signature 
	  algorithms. The conventions for the associated subject public 
	  keys are also described.</t>
    </abstract>
  </front>

  <middle>
  
    <section title="Change Log">
	  <t>[ EDNOTE: Remove this section before publication. ]</t>
      <t><list style="symbols"> 
	    <t>draft-ietf-lamps-pkix-shake-03:
		  <list> 
		  <t>Updates based on suggestions and clarifications by Jim. </t>
		  <t>Added ASN.1.</t>
	    </list></t>
	    <t>draft-ietf-lamps-pkix-shake-02:
		  <list> 
		  <t>Significant reorganization of the sections to simplify the introduction, the new OIDs and their use in PKIX.</t>
		  <t>Added new OIDs for RSASSA-PSS that hardcode hash, salt and MGF, according the WG consensus.</t>
		  <t>Updated Public Key section to use the new RSASSA-PSS OIDs and clarify the algorithm identifier usage.</t>
		  <t>Removed the no longer used SHAKE OIDs from section 3.1.</t>
		  <t>Consolidated subsection for message digest algorithms.</t>
		  <t>Text fixes.</t>
	    </list></t>
	    <t>draft-ietf-lamps-pkix-shake-01:
		  <list> 
		  <t>Changed titles and section names.</t>
	      <t>Removed DSA after WG discussions.</t>
		  <t>Updated shake OID names and parameters, added MGF1 section.</t>
		  <t>Updated RSASSA-PSS section.</t>
		  <t>Added Public key algorithm OIDs.</t>
		  <t>Populated Introduction and IANA sections.</t>
	    </list></t>
	    <t>draft-ietf-lamps-pkix-shake-00:
		  <list> 
	      <t>Initial version</t>
	    </list></t>
	  </list></t>
    </section>
	
    <section title="Introduction">
      <t>This document describes several cryptographic algorithm identifiers 
	  for several cryptographic algorithms which use variable length output 
	  SHAKE functions introduced in <xref target="SHA3"/> which can be used 
	  with the Internet X.509 Certificate and CRL profile <xref target="RFC5280"/>. </t>
	  
      <t>The SHA-3 family of one-way hash functions is specified in <xref target="SHA3"/>. 
	  In the SHA-3 family, two extendable-output functions (SHAKEs): 
	  SHAKE128 and SHAKE256, are defined. Four other hash function instances, SHA3-224, SHA3-256, 
	  SHA3-384, and SHA3-512 are also defined but are out of scope for this document. 
	  A SHAKE is a variable length hash function. The output length, in bits, of a SHAKE 
	  is defined by the d parameter. The corresponding collision and second 
	  preimage resistance strengths for SHAKE128 are min(d/2,128) and min(d,128) bits respectively. 
	  And, the corresponding collision and second preimage resistance strengths for SHAKE256 
	  are min(d/2,256) and min(d,256) bits respectively.</t>
	  
	  <t>A SHAKE can be used as the message digest function (to hash the message to be signed) 
	  in RSASSA-PSS and ECDSA and as the hash in the mask generating function in RSASSA-PSS. 
	  In <xref target="oids"/>, we define four new OIDs for RSASSA-PSS and ECDSA when SHAKE128 and 
	  SHAKE256 are used. The same algorithm identifiers are used for identifying a public key, 
	  and identifying a signature. </t>
    </section>
    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

    <section anchor="terminology" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t> 
    </section>  <!-- Terminology -->
	
    <?rfc needLines="8" ?>

    <section title="Identifiers" anchor="oids">
	  <!-- Commention out the below OIDs as they are no longer pertinent for the below public keys and sigs -->
	  <!-- The Object Identifiers (OIDs) for these two hash functions are defined in 
	  <xref target="shake-nist-oids"/> and are included here for convenience: </t>
      
	  <t><figure><artwork><![CDATA[
  id-shake128-len OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)
		country(16) us(840) organization(1) gov(101) csor(3)
		nistalgorithm(4) hashalgs(2) 17 } 
				
  ShakeOutputLen ::= INTEGER - - Output length in octets
]]></artwork></figure></t>
	  <t>When using the id-shake128-len algorithm identifier, the parameters 
	  MUST be present, and they MUST employ the ShakeOutputLen -->
	  <!-- "MUST employ syntax borrowed from RFC4055 -->
	  <!-- syntax that contains an encoded positive integer value at least 32  
	  in this specification.</t>
	  <t><figure><artwork><![CDATA[
  id-shake256-len OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)
		country(16) us(840) organization(1) gov(101) csor(3)
		nistalgorithm(4) hashalgs(2) 18 }   
			
  ShakeOutputLen ::= INTEGER - - Output length in octets
]]></artwork></figure></t>
	  <t>When using the id-shake256-len algorithm identifier, the parameters 
	  MUST be present, and they MUST employ the ShakeOutputLen -->
	  <!-- "MUST employ syntax borrowed from RFC4055 -->
	  <!-- syntax that contains an encoded positive integer value at least 64 
	  in this specification.</t>	-->

	  <t>The new identifiers for RSASSA-PSS signatures using SHAKEs are below.</t>
	  
	  <t><figure><artwork><![CDATA[
  id-RSASSA-PSS-SHAKE128  OBJECT IDENTIFIER  ::=  { TBD }
]]></artwork></figure></t>

	        <t><figure><artwork><![CDATA[
  id-RSASSA-PSS-SHAKE256  OBJECT IDENTIFIER  ::=  { TBD }
   
  [ EDNOTE: "TBD" will be specified by NIST later. ]
]]></artwork></figure></t>
		           
 	  <t>The new algorithm identifiers of ECDSA signatures using SHAKEs are below.</t> 
      <t><list>
        <t><figure><artwork><![CDATA[
  id-ecdsa-with-shake128 OBJECT IDENTIFIER  ::=  { joint-iso-ccitt(2) 
            country(16) us(840) organization(1) gov(101) 
            csor(3) algorithms(4) id-ecdsa-with-shake(3) 
            TBD }
]]></artwork></figure></t>
        <t><figure><artwork><![CDATA[
  id-ecdsa-with-shake256 OBJECT IDENTIFIER  ::=  { joint-iso-ccitt(2) 
            country(16) us(840) organization(1) gov(101) 
            csor(3) algorithms(4) id-ecdsa-with-shake(3) 
            TBD }

  [ EDNOTE: "TBD" will be specified by NIST later. ]
]]></artwork></figure></t>
	  </list></t> 
	  
	  <!-- <xref target="RFC8017"/>, but we include it here as well for convenience:</t>
	  <t><figure><artwork><![CDATA[
   id-mgf1  OBJECT IDENTIFIER  ::=  { pkcs-1 8 }
]]></artwork></figure>--> 
	  <!-- <t>The parameters field associated with id-mgf1 MUST have a hashAlgorithm value that identifies 
	  the hash used with MGF1. To use SHAKE as this hash, this parameter MUST be 
	  id-shake128-len or id-shake256-len as specified in <xref target="xofs" /> above. </t>--> 
    
	  <t>The parameters for these four identifiers above MUST be absent. That is, 
	  the identifier SHALL be a SEQUENCE of one component, the OID.</t>
	  <t><xref target="rsa-sigs"/> and <xref target="ecdsa-sigs"/> specify the required output length 
	  for each use of SHAKE128 or SHAKE256 in RSASSA-PSS and ECDSA. In summary, when hashing messages
          to be signed, output lengths of SHAKE128 and SHAKE256 are 256 and 512 bits respectively. 
	  When the SHAKEs are used as mask generation functions, their output lengths are (n - 264) or (n - 520) bits
	  respectively, where n is a RSA modulus size in bits.</t>
	</section> 
	
	<section title="Use in PKIX">

	  <section title="Signatures" anchor="sigs">
	  
	    <t>Signatures can be placed in a number of different ASN.1 structures.
        The top level structure for an X.509 certificate, to illustrate 
        how signatures are frequently encoded with an algorithm identifier 
		and a location for the signature, is </t>
        <t><figure><artwork><![CDATA[
   Certificate  ::=  SEQUENCE  {
      tbsCertificate       TBSCertificate,
      signatureAlgorithm   AlgorithmIdentifier,
      signatureValue       BIT STRING  }
]]></artwork></figure></t>
	  
	    <t>The identifiers defined in <xref target="oids"/> can be used 
		as the AlgorithmIdentifier in the signatureAlgorithm field in the sequence 
		Certificate and the signature field in the sequence tbsCertificate in X.509 
		<xref target="RFC5280"/>.</t>
		
		<t>Conforming CA implementations MUST specify the algorithms  
		explicitly by using the OIDs specified in <xref target="oids"/> when 
		encoding RSASSA-PSS and ECDSA with SHAKE signatures 
		in certificates and CRLs. Encoding rules for RSASSA-PSS and ECDSA 
		signature values are specified in <xref target="RFC4055"/> and 
		<xref target="RFC5480"/> respectively.</t>
		
		<t>Conforming client implementations that process RSASSA-PSS and ECDSA 
		with SHAKE signatures when processing certificates and CRLs 
		MUST recognize the corresponding OIDs.</t>
		
		<section title="RSASSA-PSS Signatures" anchor="rsa-sigs">		  
		  <t>The RSASSA-PSS algorithm is defined in <xref target="RFC8017"/>. 
		  When id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256 specified in <xref target="oids"/> 
		  is used, the encoding MUST omit the parameters field. That is, 
		  the AlgorithmIdentifier SHALL be a SEQUENCE of one component,  
		  id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256. </t>
		  
		  <t>The hash algorithm to hash a message being signed and the hash algorithm as the
		  mask generation function "MGF(H, emLen - hLen - 1)" <xref target="RFC8017"/> used 
		  in RSASSA-PSS MUST be the same, SHAKE128 or SHAKE256 respectively. The 
		  output-length of the hash algorithm which hashes the message SHALL be 32 or 
		  64 bytes respectively. </t> 
			
	      <t>In RSASSA-PSS, a mask generation function takes an octet string of variable length and
		  a desired output length as input, and outputs an octet 
		  string of the desired length. In RSASSA-PSS with SHAKES, the SHAKEs MUST be 
		  used natively as the MGF function, instead of the MGF1 algorithm that uses 
		  the hash function in multiple iterations as specified in Section B.2.1 of 
		  <xref target="RFC8017"/>. In other words, the MGF is defined as 

		  <figure><artwork><![CDATA[
    SHAKE128(mgfSeed, maskLen) 
]]></artwork></figure>
          and 
          <figure><artwork><![CDATA[
    SHAKE256(mgfSeed, maskLen)
]]></artwork></figure>
          respectively for id-RSASSA-PSS-SHAKE128 and id-RSASSA-PSS-SHAKE256. The mgfSeed is 
		  the seed from which mask is generated, an octet string. The maskLen for SHAKE128 or SHAKE256 being used 
		  as the MGF is (n - 264)/8 or (n - 520)/8 bytes respectively, where n is the RSA modulus 
		  in bits. For example, when RSA modulus n is 2048, the output length of SHAKE128 or 
		  SHAKE256 as the MGF will be 223 or 191 when id-RSASSA-PSS-SHAKE128 or 
		  id-RSASSA-PSS-SHAKE256 is used respectively. </t>
		      
		  <t>The RSASSA-PSS saltLength MUST be 32 
		  or 64 bytes respectively. Finally, the trailerField MUST be 1, which represents 
		  the trailer field with hexadecimal value 0xBC <xref target="RFC8017"/>.</t>
		<!-- <t><figure><artwork><![CDATA[
   id-RSASSA-PSS  OBJECT IDENTIFIER  ::=  { pkcs-1 k }

   RSASSA-PSS-params  ::=  SEQUENCE  {
         hashAlgorithm      HashAlgorithm, 
         maskGenAlgorithm   MaskGenAlgorithm, 
         saltLength         INTEGER, 
         trailerField       INTEGER }
]]></artwork></figure></t> -->

        <!-- <section title="EdDSA with SHAKE">
          <t>[ EDNOTE: For the group to decide: pre-hash version or non-prehash version EdDSAs. PureEdDSA, the pre-hashed version of EdDSA, as currently also proposed in draft-ietf-curdle-cms-eddsa-signatures mandates the hash function as SHA512 for Ed25519 and SHAKE256(x,64) for Ed448. The HashEdDSA version of EdDSA does not define the hash. It is up to the WG to go the Pre-hash route which would require an OID that contained the hash. ] </t>
		  <t>
		     <list>
			   <t><figure><artwork><![CDATA[
id-eddsa-with-shake128 OBJECT IDENTIFIER ::= { }
]]></artwork></figure></t>
			   <t><figure><artwork><![CDATA[
id-eddsa-with-shake256 OBJECT IDENTIFIER ::= {  }
]]></artwork></figure></t>
			   </list></t>
        </section> -->	  
		</section>
		
		<section title="Deterministic ECDSA Signatures" anchor="ecdsa-sigs">
	      <t>The Elliptic Curve Digital Signature Algorithm (ECDSA) is defined in 
	      <xref target="X9.62"/>. When the id-ecdsa-with-SHAKE128 or id-ecdsa-with-SHAKE256
		  (specified in <xref target="oids"/>) algorithm identifier appears, the respective SHAKE 
		  function (SHAKE128 or SHAKE256) is used as the hash. 
		  The encoding MUST omit the parameters field. That is, the AlgorithmIdentifier 
		  SHALL be a SEQUENCE of one component, the OID id-ecdsa-with-SHAKE128 or 
		  id-ecdsa-with-SHAKE256.</t>
	      
          <t>For simplicity and compliance with the ECDSA standard specification, 
	      the output size of the hash function must be explicitly determined. The 
	      output size, d, for SHAKE128 or SHAKE256 used in ECDSA MUST be 256 or 512  
		  bits respectively. </t>
	  	  	
		  <t>Conforming CA implementations that generate ECDSA with SHAKE signatures 
		  in certificates or CRLs MUST generate such signatures with a deterministicly 
		  generated, non-random k in accordance 
		  with all the requirements specified in <xref target="RFC6979"/>. 
		  <!-- Sections 7.2 and 7.3 of 
		  <xref target="X9.62"/> or with all the requirements specified in Section 
		  4.1.3 of <xref target="SEC1"/>. -->
		  They MAY also generate such signatures 
		  in accordance with all other recommendations in <xref target="X9.62"/> or 
		  <xref target="SEC1"/> if they have a stated policy that requires 
		  conformance to these standards. These standards may have not specified 
		  SHAKE128 and SHAKE256 as hash algorithm options. However, SHAKE128 and 
		  SHAKE256 with output length being 32 and 64 octets respectively are 
		  subtitutions for 256 and 512-bit output hash algorithms such as SHA256 
		  and SHA512 used in the standards.</t>
		  
		  <t>In Section 3.2 "Generation of k" of <xref target="RFC6979"/>, HMAC is used to derive 
		  the deterministic k. Conforming implementations that generate deterministic 
		  ECDSA with SHAKE signatures in X.509 MUST use KMAC with SHAKE128 or KMAC with 
		  SHAKE256 as specfied in <xref target="SP800-185"/> when SHAKE128 or SHAKE256 is 
		  used as the message hashing algorithm, respectively. In this situation, KMAC with 
		  SHAKE128 and KMAC with SHAKE256 have 256-bit and 512-bit outputs respectively, 
		  and the optional customization bit string S is an empty string.</t>
          </section>
	    </section>

	  <section title="Public Keys">
	     
	        <t>Certificates conforming to <xref target="RFC5280"/> can convey a 
		public key for any public key algorithm. The certificate indicates 
		the algorithm through an algorithm identifier. This algorithm 
		identifier is an OID and optionally associated parameters.</t>
   
        <t>In the X.509 certificate, the subjectPublicKeyInfo field has the
        SubjectPublicKeyInfo type, which has the following ASN.1 syntax: </t>
        
		<t><figure><artwork><![CDATA[
  SubjectPublicKeyInfo  ::=  SEQUENCE  {
       algorithm         AlgorithmIdentifier,
       subjectPublicKey  BIT STRING
  }
]]></artwork></figure></t>
   
        <t>The fields in SubjectPublicKeyInfo have the following meanings:
        <list style="symbols"> 
          <t>algorithm is the algorithm identifier and parameters for the
           public key.</t>
          <t>subjectPublicKey contains the byte stream of the public key. The
          algorithms defined in this document always encode the public key
          as an exact multiple of 8-bits.</t>
        </list></t>
   	  
		<t>Conforming CA implementations MUST specify the algorithms  
		explicitly by using the OIDs specified in <xref target="oids"/> 
		when encoding RSASSA-PSS and ECDSA with SHAKE public keys 
		in certificates and CRLs. 
		The conventions for RSASSA-PSS and ECDSA <!-- and EdDSA --> public keys 
		algorithm identifiers are as specified in <xref target="RFC3279"/>, 
		<xref target="RFC4055"/> and <xref target="RFC5480"/>
		<!-- and <xref target="I-D.josefsson-pkix-eddsa"/>-->, 
		but we include them below for convenience. 
		</t> 
	    
		<section title="RSASSA-PSS Public Keys"> 
	
		  <t><xref target="RFC3279"/> defines the following OID for RSA AlgorithmIdentifier 
		  in the SubjectPublicKeyInfo with NULL parameters.</t>
		  <t><figure><artwork><![CDATA[
  rsaEncryption OBJECT IDENTIFIER ::=  { pkcs-1 1}
]]></artwork></figure></t>
	    		  
		  <t>Additionally, when the RSA private key owner wishes to limit the use of 
		  the public key exclusively to RSASSA-PSS, the AlgorithmIdentifiers for 
		  RSASSA-PSS defined in <xref target="oids"/> can be used as the algorithm 
		  field in the SubjectPublicKeyInfo sequence <xref target="RFC5280"/>. The 
		  identifier parameters, as explained in section <xref target="oids"/>, MUST be 
		  absent. </t>
		  
		  <t>Regardless of what public key algorithm identifier is used, the RSA public 
		  key, which is composed of a modulus and a public exponent, MUST be encoded 
		  using the RSAPublicKey type <xref target="RFC4055"/>. The output of this 
		  encoding is carried in the certificate subjectPublicKey. </t>
          <t><figure><artwork><![CDATA[
  RSAPublicKey ::= SEQUENCE {
        modulus INTEGER, -- n
        publicExponent INTEGER  -- e
  }
]]></artwork></figure></t> 
		</section>
		
        <section title="ECDSA Public Keys">
		  <t>For ECDSA, the public key identifier defined in <xref target="RFC5480"/> is 
		  <!--when id-ecdsa-with-shake128 or id-ecdsa-with-shake256 
		  is used as the AlgorithmIdentifier in the algorithm field of SubjectPublicKeyInfo, 
		  the parameters, as explained in section <xref target="oids"/>, MUST be absent. --></t>
		  <t><figure><artwork><![CDATA[
  id-ecPublicKey OBJECT IDENTIFIER ::= {
       iso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 }
]]></artwork></figure></t>

		  <t>Additionally, the mandatory EC SubjectPublicKey is defined in Section 2.1.1 
		  and its syntax is in Section 2.2 of <xref target="RFC5480"/>. We also include them 
		  here for convenience: </t>

          <t>The id-ecPublicKey parameters MUST be present and are defined as </t>	   
	      <t><figure><artwork><![CDATA[
  ECParameters ::= CHOICE {
      namedCurve         OBJECT IDENTIFIER
      -- implicitCurve   NULL
      -- specifiedCurve  SpecifiedECDomain 
   }
]]></artwork></figure></t>
          <t>The ECParameters associated with the ECDSA public key in the signer's 
	      certificate SHALL apply to the verification of the signature.</t>
        </section>
	  </section>
	  
	</section>

    <section anchor="IANA" title="IANA Considerations">
      <!-- <t>IANA is kindly requested to register two OIDs in the SMI Security for
      PKIX Module Identifier registry for the ASN.1 modules found in
      <xref target="asn"/>.  The description is as follows:
      <list style="symbols">
	    <t></t>
      </list>
      where the four digits at the end represent the ASN.1's publication
      date.</t> -->
	  <t>[ EDNOTE: Update here only if there are OID allocations by IANA. ]
	  <!-- This document uses several registries that were originally created in <xref target="shake-nist-oids"/>. --></t>
	  <t>This document has no IANA actions. </t>
    </section>

    <section anchor="Security" title="Security Considerations">  
      <!-- <t>SHAKE128 and SHAKE256 are one-way extensible-output functions. Their output 
	  length depends on a required length of the consumming application. </t> -->
      
      <t>The SHAKEs are deterministic functions. Like any other deterministic functions, 
	  executing each  function with the same input multiple times will produce the 
	  same output. Therefore, users should not expect unrelated outputs (with the 
	  same or different output lengths) from excuting a SHAKE function with the 
	  same input multiple times.The shorter one of any 2 outputs produced from a 
	  SHAKE with the same input is a prefix of the longer one. It is a similar 
	  situation as truncating a 512-bit output of SHA-512 by taking its 256 left-most
	  bits. These 256 left-most bits are a prefix of the 512-bit output.</t>
	  
	  <t>Implementations must protect the signer's private key. Compromise of
      the signer's private key permits masquerade.</t>

	  <t>Implementations must randomly generate one-time values, such as the k value when generating a ECDSA
      signature. In addition, the generation of public/private key pairs
      relies on random numbers. The use of inadequate pseudo-random
      number generators (PRNGs) to generate such cryptographic values can
      result in little or no security. The generation of quality random
      numbers is difficult. <xref target="RFC4086"/> offers important guidance 
	  in this area, and <xref target="SP800-90A"/> series provide acceptable 
      PRNGs.</t>
      
	  <t>Implementers should be aware that cryptographic algorithms may 
	  become weaker with time. As new cryptanalysis techniques are developed 
	  and computing power increases, the work factor or time required to break a 
	  particular cryptographic algorithm may decrease. Therefore, cryptographic
      algorithm implementations should be modular allowing new algorithms
      to be readily inserted. That is, implementers should be prepared to
      regularly update the set of algorithms in their implementations.</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->
    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>We would like to thank Sean Turner and Jim Schaad for his valuable contributions to this document.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119; 
	  <!-- &RFC3280; -->
	  &RFC4055;
      &RFC5280;
	  &RFC5480;
	  &RFC8017; <!-- RFC8017 is Informational draft but we are keeping it in the Normative References even though idnits complains because we need a normative reference for RSASSA-PSS. RFC4056 does the same thing with RSASS-PSS v2.1 -->
	  <!-- <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml-ids/reference.I-D.draft-josefsson-pkix-eddsa-04.xml"?> -->
      <reference anchor="SHA3" target="https://www.nist.gov/publications/sha-3-standard-permutation-based-hash-and-extendable-output-functions">
        <front>
          <title>SHA-3 Standard - Permutation-Based Hash and Extendable-Output Functions FIPS PUB 202</title>
          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>
          <date month="August" year="2015" />
        </front>
      </reference>
	</references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->
      <!--&RFC2629; -->
	  &RFC3279;
	  &RFC4086;
	  &RFC6979;
      <!--<reference anchor="shake-nist-oids" target="https://csrc.nist.gov/Projects/Computer-Security-Objects-Register/Algorithm-Registration">
        <front>
          <title>Computer Security Objects Register</title>
          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>
          <date month="October" year="2017" />
        </front>
      </reference> -->
      <reference anchor="SEC1" target="http://www.secg.org/sec1-v2.pdf">
        <front>
          <title>SEC 1: Elliptic Curve Cryptography</title>
          <author>
            <organization>Standards for Efficient Cryptography Group</organization>
          </author>
          <date month="May" year="2009" />
        </front>
      </reference>
      <reference anchor="X9.62">
        <front>
          <title>X9.62-2005 Public Key Cryptography for the Financial Services Industry: The Elliptic Curve Digital Signature Standard (ECDSA)</title>
          <author>
            <organization>American National Standard for Financial Services (ANSI)</organization>
          </author>
          <date month="November" year="2005" />
        </front>
      </reference>
      <reference anchor="SP800-90A" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf">
        <front>
          <title>Recommendation for Random Number Generation Using Deterministic Random Bit Generators. NIST SP 800-90A</title>
          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>
          <date month="June" year="2015" />
        </front>
      </reference>
      <reference anchor="SP800-185" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-185.pdf">
        <front>
          <title>SHA-3 Derived Functions: cSHAKE, KMAC, TupleHash and ParallelHash. NIST SP 800-185</title>
          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>
          <date month="December" year="2016" />
        </front>
      </reference>
    </references>

    <section anchor="asn" title="ASN.1 module">
	  <t>This appendix includes the ASN.1 modules for SHAKEs in X.509. 
	  This module does not come from any existing RFC. </t>
    <t><figure><artwork><![CDATA[ 
   PKIXAlgsForSHAKE-2018 { iso(1) identified-organization(3) dod(6)
     internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
     id-mod-pkix1-shake-2018(TBD) }

   DEFINITIONS EXPLICIT TAGS ::=

   BEGIN

   -- EXPORTS ALL;

   IMPORTS

   -- FROM [RFC5912]

   PUBLIC-KEY, SIGNATURE-ALGORITHM, DIGEST-ALGORITHM, MAC-ALGORITHM, 
                                                      SMIME-CAPS
   FROM AlgorithmInformation-2009
     { iso(1) identified-organization(3) dod(6) internet(1) security(5)
       mechanisms(5) pkix(7) id-mod(0)
       id-mod-algorithmInformation-02(58) }
   
   -- FROM [RFC5912]
   
   id-RSASSA-PSS, RSAPublicKey, rsaEncryption, id-ecPublicKey, 
                                       ECPoint, ECDSA-Sig-Value 
   FROM PKIXAlgs-2009 { iso(1) identified-organization(3) dod(6)
        internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-pkix1-algorithms2008-02(56) }
   
   --
   -- One-Way Hash Functions
   -- SHAKE128
   mda-shake128 DIGEST-ALGORITHM ::= {
     IDENTIFIER id-shake128  -- with output length 32 bytes.
   } 
   id-shake128 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
                                       us(840) organization(1) gov(101)
                                       csor(3) nistAlgorithm(4)
                                       hashAlgs(2) 11 }
    
   -- SHAKE-256
   mda-shake256 DIGEST-ALGORITHM ::= {
     IDENTIFIER id-shake256  -- with output length 64 bytes.
   }
   id-shake256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
                                       us(840) organization(1) gov(101)
                                       csor(3) nistAlgorithm(4)
                                       hashAlgs(2) 12 }
   
   --
   -- Public Key (pk-) Algorithms
   --
   PublicKeys PUBLIC-KEY ::= {
     ...,
	 pk-rsaSSA-PSS-SHAKE128 |
     pk-rsaSSA-PSS-SHAKE256 | 	 
     pk-ec, 
	 ...
   }
   
   -- From [RFC5912] - Here so it compiles.
   
   pk-rsa PUBLIC-KEY ::= {
    IDENTIFIER rsaEncryption
    KEY RSAPublicKey
    PARAMS TYPE NULL ARE absent
    -- Private key format not in this module --
    CERT-KEY-USAGE {digitalSignature, nonRepudiation,
    keyEncipherment, dataEncipherment, keyCertSign, cRLSign}
   }

   -- The hashAlgorithm is mda-shake128
   -- The maskGenAlgorithm is mda-shake128 
   -- Mask Gen Algorithm is SHAKE128 with output length
   -- (n - 264)/8, where n is the RSA modulus in bits. 
   -- the saltLength is 32 
   -- the trailerField is 1    
   pk-rsaSSA-PSS-SHAKE128 PUBLIC-KEY ::= {
       IDENTIFIER id-RSASSA-PSS-SHAKE128
       KEY RSAPublicKey
       PARAMS TYPE NULL ARE absent
        -- Private key format not in this module --
       CERT-KEY-USAGE { nonRepudiation, digitalSignature,
                            keyCertSign, cRLSign }
   }

   -- The hashAlgorithm is mda-shake256
   -- The maskGenAlgorithm is mda-shake256 
   -- Mask Gen Algorithm is SHAKE256 with output length
   -- (n - 520)/8, where n is the RSA modulus in bits. 
   -- the saltLength is 64
   -- the trailerField is 1
   pk-rsaSSA-PSS-SHAKE256 PUBLIC-KEY ::= {
       IDENTIFIER id-RSASSA-PSS-SHAKE256
       KEY RSAPublicKey
       PARAMS TYPE NULL ARE absent
        -- Private key format not in this module --
       CERT-KEY-USAGE { nonRepudiation, digitalSignature,
                            keyCertSign, cRLSign }
   }
   
   pk-ec PUBLIC-KEY ::= {
     IDENTIFIER id-ecPublicKey
     KEY ECPoint
     PARAMS TYPE ECParameters ARE required
     -- Private key format not in this module --
     CERT-KEY-USAGE { digitalSignature, nonRepudiation, keyAgreement,
                      keyCertSign, cRLSign }
   }
   ECParameters ::= CHOICE {
    namedCurve      CURVE.&id({NamedCurve})
    -- implicitCurve   NULL
      -- implicitCurve MUST NOT be used in PKIX
    -- specifiedCurve  SpecifiedCurve
      -- specifiedCurve MUST NOT be used in PKIX
      -- Details for specifiedCurve can be found in [X9.62]
      -- Any future additions to this CHOICE should be coordinated
      -- with ANSI X.9.
   }
   
   --
   -- Signature Algorithms (sa-)
   --
   SignatureAlgs SIGNATURE-ALGORITHM ::= {
     ...,
     -- This expands SignatureAlgorithms from [RFC5912]
     sa-rsassapssWithSHAKE128 |  
     sa-rsassapssWithSHAKE256 | 
     sa-ecdsaWithSHAKE128 |
     sa-ecdsaWithSHAKE256 
   }
   
   --
   -- SMIME Capabilities (sa-)
   --
   SMimeCaps SMIME-CAPS ::= {
     ...,
     -- The expands SMimeCaps from [RFC5912]
     sa-rsassapssWithSHAKE128.&smimeCaps |
     sa-rsassapssWithSHAKE256.&smimeCaps |
     sa-ecdsaWithSHAKE128.&smimeCaps |
     sa-ecdsaWithSHAKE256.&smimeCaps 
     }
   
   -- RSASSA-PSS with SHAKE128 							
   sa-rsassapssWithSHAKE128 SIGNATURE-ALGORITHM ::= {
      IDENTIFIER id-RSASSA-PSS-SHAKE128
      PARAMS TYPE NULL ARE absent
         -- The hashAlgorithm is mda-shake128
         -- The maskGenAlgorithm is mda-shake128 
         -- Mask Gen Algorithm is SHAKE128 with output length
         -- (n - 264)/8, where n is the RSA modulus in bits. 
         -- the saltLength is 32 
         -- the trailerField is 1 
	  HASHES {mda-shake128} -- omitting mda-shake128-params
      PUBLIC-KEYS { pk-rsa | pk-rsaSSA-PSS-SHAKE128 }
      SMIME-CAPS { IDENTIFIED BY id-RSASSA-PSS-SHAKE128 }
   }
   id-RSASSA-PSS-SHAKE128  OBJECT IDENTIFIER  ::=  { TBD }
   
   -- RSASSA-PSS with SHAKE256
   sa-rsassapssWithSHAKE256 SIGNATURE-ALGORITHM ::= {
      IDENTIFIER id-RSASSA-PSS-SHAKE256
      PARAMS TYPE NULL ARE absent
         -- The hashAlgorithm is mda-shake256
         -- The maskGenAlgorithm is mda-shake256 
         -- Mask Gen Algorithm is SHAKE256 with output length
         -- (n - 520)/8, where n is the RSA modulus in bits. 
         -- the saltLength is 64
         -- the trailerField is 1
	  HASHES {mda-shake256} -- omitting mda-shake256-params
      PUBLIC-KEYS { pk-rsa | pk-rsaSSA-PSS-SHAKE256 }
      SMIME-CAPS { IDENTIFIED BY id-RSASSA-PSS-SHAKE256 }
   }
   id-RSASSA-PSS-SHAKE256  OBJECT IDENTIFIER  ::=  { TBD }
   
   -- Determinstic ECDSA with SHAKE128
   -- Generating k by using KMAC with SHAKE128 as the hash 
   -- [SP800-185] instead of HMAC with output length 256-bits 
   -- that is equal to or slightly less than the elliptic 
   -- curve group order. S is set to an empty string. 
   sa-ecdsaWithSHAKE128 SIGNATURE-ALGORITHM ::= {
      IDENTIFIER id-ecdsa-with-shake128
      VALUE ECDSA-Sig-Value
      PARAMS TYPE NULL ARE absent
      HASHES { mda-shake128 }
      PUBLIC-KEYS { pk-ec }
      SMIME-CAPS { IDENTIFIED BY id-ecdsa-with-shake128 }
   }
   id-ecdsa-with-shake128 ::= { joint-iso-itu-t(2) country(16)
                                us(840) organization(1) gov(101)
                                csor(3) nistAlgorithm(4)
                                sigAlgs(3) TBD }
   
   -- Determinstic ECDSA with SHAKE256
   -- Generating k by using KMAC with SHAKE256 as the hash 
   -- [SP800-185] instead of HMAC with output length 512-bits 
   -- truncated to equal to or slightly less than the elliptic 
   -- curve group order. S is set to an empty string.
   sa-ecdsaWithSHAKE256 SIGNATURE-ALGORITHM ::= {
      IDENTIFIER id-ecdsa-with-shake256
      VALUE ECDSA-Sig-Value
      PARAMS TYPE NULL ARE absent
      HASHES { mda-shake256 }
      PUBLIC-KEYS { pk-ec }
      SMIME-CAPS { IDENTIFIED BY id-ecdsa-with-shake256 }
   }
   id-ecdsa-with-shake256 ::= { joint-iso-itu-t(2) country(16)
                                us(840) organization(1) gov(101)
                                csor(3) nistAlgorithm(4)
                                sigAlgs(3) TBD }
   
   END
	]]></artwork></figure>
   </t>
    </section>

  </back>
</rfc>
